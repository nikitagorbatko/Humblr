//// Code generated by moshi-kotlin-codegen. Do not edit.
//@file:Suppress(
//    "DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
//    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
//    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION"
//)
//
//package com.nikitagorbatko.humblr.api
//
//import com.nikitagorbatko.humblr.api.pojos.CommentDataDto
//import com.nikitagorbatko.humblr.api.pojos.RepliesDto
//import com.squareup.moshi.FromJson
//import com.squareup.moshi.Json
//import com.squareup.moshi.JsonAdapter
//import com.squareup.moshi.JsonReader
//import com.squareup.moshi.JsonWriter
//import com.squareup.moshi.Moshi
//import com.squareup.moshi.ToJson
//import java.lang.NullPointerException
//import kotlin.Boolean
//import kotlin.Double
//import kotlin.Int
//import kotlin.String
//import kotlin.Suppress
//import kotlin.Unit
//import kotlin.collections.emptySet
//import kotlin.text.buildString
//
//public class CustomCommentDataDtoJsonAdapter(
//
//) : JsonAdapter<CommentDataDto>() {
//    val moshi: Moshi = Moshi.Builder().build()
//    private val options: JsonReader.Options = JsonReader.Options.of(
//        "subreddit",
//        "selftext",
//        "saved",
//        "title",
//        "downs",
//        "name",
//        "upvote_ratio",
//        "body",
//        "author_fullname",
//        "likes",
//        "id",
//        "author",
//        "num_comments",
//        "replies",
//        "url",
//        "is_video"
//    )
//
//    private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(
//        String::class.java,
//        emptySet(), "subreddit"
//    )
//
//    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
//        moshi.adapter(Boolean::class.javaObjectType, emptySet(), "saved")
//
//    private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(
//        Int::class.javaObjectType,
//        emptySet(), "downs"
//    )
//
//    private val nullableDoubleAdapter: JsonAdapter<Double?> =
//        moshi.adapter(Double::class.javaObjectType, emptySet(), "upvoteRatio")
//
//    private val nullableRepliesDtoAdapter: JsonAdapter<RepliesDto?> =
//        moshi.adapter(RepliesDto::class.java, emptySet(), "replies")
//
//    public override fun toString(): String = buildString(36) {
//        append("GeneratedJsonAdapter(").append("CommentDataDto").append(')')
//    }
//
//    @FromJson
//    public override fun fromJson(reader: JsonReader): CommentDataDto {
//        var subreddit: String? = null
//        var selftext: String? = null
//        var saved: Boolean? = null
//        var title: String? = null
//        var downs: Int? = null
//        var name: String? = null
//        var upvoteRatio: Double? = null
//        var body: String? = null
//        var authorFullname: String? = null
//        var likes: String? = null
//        var id: String? = null
//        var author: String? = null
//        var numComments: Int? = null
//        var replies: RepliesDto? = null
//        var url: String? = null
//        var isVideo: Boolean? = null
//        reader.beginObject()
//        while (reader.hasNext()) {
//            when (reader.selectName(options)) {
//                0 -> subreddit = nullableStringAdapter.fromJson(reader)
//                1 -> selftext = nullableStringAdapter.fromJson(reader)
//                2 -> saved = nullableBooleanAdapter.fromJson(reader)
//                3 -> title = nullableStringAdapter.fromJson(reader)
//                4 -> downs = nullableIntAdapter.fromJson(reader)
//                5 -> name = nullableStringAdapter.fromJson(reader)
//                6 -> upvoteRatio = nullableDoubleAdapter.fromJson(reader)
//                7 -> body = nullableStringAdapter.fromJson(reader)
//                8 -> authorFullname = nullableStringAdapter.fromJson(reader)
//                9 -> likes = nullableStringAdapter.fromJson(reader)
//                10 -> id = nullableStringAdapter.fromJson(reader)
//                11 -> author = nullableStringAdapter.fromJson(reader)
//                12 -> numComments = nullableIntAdapter.fromJson(reader)
//                13 -> {
//                    try {
//                        replies = nullableRepliesDtoAdapter.fromJson(reader)
//                    } catch (_: Exception) {
//                        replies = null
//                    }
//                }
//                14 -> url = nullableStringAdapter.fromJson(reader)
//                15 -> isVideo = nullableBooleanAdapter.fromJson(reader)
//                -1 -> {
//                    // Unknown name, skip it.
//                    reader.skipName()
//                    reader.skipValue()
//                }
//            }
//        }
//        reader.endObject()
//        return CommentDataDto(
//            subreddit = subreddit,
//            selftext = selftext,
//            saved = saved,
//            title = title,
//            downs = downs,
//            name = name,
//            upvoteRatio = upvoteRatio,
//            body = body,
//            authorFullname = authorFullname,
//            likes = likes,
//            id = id,
//            author = author,
//            numComments = numComments,
//            replies = replies,
//            url = url,
//            isVideo = isVideo
//        )
//    }
//
//    @ToJson
//    public override fun toJson(writer: JsonWriter, value_: CommentDataDto?): Unit {
//        if (value_ == null) {
//            throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
//        }
//        writer.beginObject()
//        writer.name("subreddit")
//        nullableStringAdapter.toJson(writer, value_.subreddit)
//        writer.name("selftext")
//        nullableStringAdapter.toJson(writer, value_.selftext)
//        writer.name("saved")
//        nullableBooleanAdapter.toJson(writer, value_.saved)
//        writer.name("title")
//        nullableStringAdapter.toJson(writer, value_.title)
//        writer.name("downs")
//        nullableIntAdapter.toJson(writer, value_.downs)
//        writer.name("name")
//        nullableStringAdapter.toJson(writer, value_.name)
//        writer.name("upvote_ratio")
//        nullableDoubleAdapter.toJson(writer, value_.upvoteRatio)
//        writer.name("body")
//        nullableStringAdapter.toJson(writer, value_.body)
//        writer.name("author_fullname")
//        nullableStringAdapter.toJson(writer, value_.authorFullname)
//        writer.name("likes")
//        nullableStringAdapter.toJson(writer, value_.likes)
//        writer.name("id")
//        nullableStringAdapter.toJson(writer, value_.id)
//        writer.name("author")
//        nullableStringAdapter.toJson(writer, value_.author)
//        writer.name("num_comments")
//        nullableIntAdapter.toJson(writer, value_.numComments)
//        writer.name("replies")
//        nullableRepliesDtoAdapter.toJson(writer, value_.replies)
//        writer.name("url")
//        nullableStringAdapter.toJson(writer, value_.url)
//        writer.name("is_video")
//        nullableBooleanAdapter.toJson(writer, value_.isVideo)
//        writer.endObject()
//    }
//}
